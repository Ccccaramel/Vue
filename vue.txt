首先需要安装 node.js
  记得查看是否有配置全局变量
  查看 node 版本
    node -v
  node 自带 npm
  查看 npm 版本
    npm -v
  从外部导入项目升级 npm
    npm install -g npm
    (若报错 permission denied,使用sudo npm install -g npm)

创建 vue 项目
    vue-cli 2.x 版本
      执行命令
        vue init webpack [新项目名称]
      创建过程中有一个选择:Use ESLint to lint your code? (Y/n),在这一步我们选择 N
      其它一直回车即可      
    vue-cli 3.x 或更高版本(https://www.jb51.net/article/248936.htm)
      执行命令  
        vue create [新项目名称]
      选择 Manually select features > Enter
      选择插件,单击空格选中 Router 和 CSS Pre-processors > Enter
      ...
      详细配置如下
        Vue CLI v5.0.8? Please pick a preset: Manually select features
        ? Check the features needed for your project: Babel, Router, CSS Pre-processors, Linter
        ? Choose a version of Vue.js that you want to start the project with 3.x
        ? Use history mode for router? (Requires proper server setup for index fallback in
        production) Yes
        ? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by
        default): Less
        ? Pick a linter / formatter config: Prettier
        ? Pick additional lint features: Lint on save
        ? Where do you prefer placing config for Babel, ESLint, etc.? In dedicated config files
      把 package.json 里所有 eslint 依赖删除并 npm i
      导入 bootstrap
        npm install bootstrap
        在 main.js 中添加如下语句
          import "bootstrap/dist/css/bootstrap.min.css";
          import "bootstrap";


  先进入你的项目下
    cd [新项目名称]
  运行项目
    vue-cli 2.x 版本
      npm run dev
    vue-cli 3.x 或更高版本
      npm run serve
  优化创建生产构建(按需操作)
    创建生产构建
      npm run build

配置环境
  按需选择合适的空目录
  cmd 进入该目录命令行界面
  安装最新稳定版 
    npm install vue -g
    -g:全局配置
  安装 vue-cli 脚手架构建工具
    vue-cli 2.x 版本
      npm install --global vue-cli
    vue-cli 3.x 或更高版本
      npm install -g @vue/cli
  如何卸载?
    vue-cli 2.x 版本
      npm uninstall -g vue-cli
    vue-cli 3.x 或更高版本
      npm uninstall -g vue/cli
  查看 vue 版本
    vue -V
  安装 webpack
    npm install --global webpack
    npm install --global webpack-cli
    npm install --global webpack-dev-server
  查看 webpack 版本
    webpack -v

bootstrap-vue
    npm install bootstrap-vue
  注意官网介绍中提到的是 v4 版本
    https://bootstrap-vue.org/docs
  安装
    npm install vue@2.6.1
    npm install bootstrap@4.6.1
    npm install popper.js@1.16.1
    npm install portal-vue@2.1.7
  以及
    npm install axios
  在 main.js 中配置
    import BootstrapVue from 'bootstrap-vue'
    Vue.use(BootstrapVue)
    import PortalVue from 'portal-vue'
    Vue.use(PortalVue)
    import 'bootstrap/dist/css/bootstrap.min.css'
    import 'bootstrap-vue/dist/bootstrap-vue'
  使用 vue-cli 3.x 或更高版本


为将之前的项目改成 springboot+vue 项目,那么安装 bootstrap 的版本就必须一致
  以 bootstrap4.1.3 为例,安装时需要指定版本
    npm install --save bootstrap@4.1.3
  另外还需安装 jquery popper.js axios ,注意指定版本
    npm install --save jquery@3.2.1
    npm install --save popper.js@1.15.0
    npm install --save axios
  如果你是新项目就不用考虑版本问题
    npm install bootstrap
    npm install jquery
    npm install popper.js
    npm install axios
  在 main.js 中导入
    import 'bootstrap'
    import $ from 'jquery'
  在需要的使用的地方引用,也可以在 App.vue 中引用,全局都可以用
    <script>
      import 'bootstrap/dist/css/bootstrap.min.css'
      import 'bootstrap/dist/js/bootstrap.min.js'
      import axios from "axios"
    </script>

  ******
  随便粘贴了一个悬浮窗组件,点击无效,弄了半天,以为是自己的问题,最后得出结论:原来是组件与 vue 的问题!
  不甘心啊,又试了试下拉菜单没问题,唯独悬浮窗有问题,我猜测是文档版本的问题,当时看的是4版本的最新版本
  换了文档依旧不行,然后有又怀疑是自己的问题,猜测是不是使用这个组件有什么前提条件
  毕竟我使用 bootstrap 都是导入后两眼一闭 Ctrl+C Ctrl+V 
  然后一直往上翻,看到了一个熟悉的单词 popper ,这不是我安装过的东西吗?!!!!
  Ctrl+C Ctrl+V 解决了
  ******
  当然你也可以试试 BootstrapVue ,但同样需要 Bootstrap
    npm install bootstrap-vue bootstrap axios
  在 main.js 添加如下代码
    import 'bootstrap/dist/css/bootstrap.css'
    import 'bootstrap-vue/dist/bootstrap-vue.css'
  在 HelloWorld.vue 添加 bootstrap 语句
    <div class="alert alert-primary" role="alert">
      This is a primary alert—check it out!
    </div>
  运行项目查看是否成功

Q:关闭项目
A:Ctrl+C (连按2次)

命令参数
　　--save:将保存配置信息到 package.json 默认为 dependencies 节点中(生产)
　　--dev:将保存配置信息到 devDependencies 节点中(测试)
　　--save:将保存配置信息到 package.json 的 dependencies 节点中
　　--save-dev:将保存配置信息到 package.json 的 devDependencies 节点中
　　dependencies:运行时的依赖,发布后,生产环境下需要用的模块(生产)
　　devDependencies:开发时的依赖,开发时使用,发布时用不到它(测试)

Q:安装模块
A:npm install --save-dev [模块]
  npm install --save-dev [模块]@[版本号]
  npm install --save [模块]@[版本号]

Q:卸载模块
A:删除模块,但不删除模块留在 package.json 中的对应信息
　　npm uninstall [模块]
  删除模块,同时删除模块留在 package.json 中 dependencies 下的对应信息
　　npm uninstall [模块] --save
  删除模块,同时删除模块留在 package.json 中 devDependencies 下的对应信息
　　npm uninstall [模块] --save-dev 

4.1.3

Router
  安装路由
    npm install vue-router@4
  引入以及注册,打开 main.js

less-loader
  npm install --save less less-loader@5
  

Q:报错:Component name "[自定义 vue 文件]" should always be multi-word  vue/multi-word-component-names
A:在 vue.config.js 的 defineConfig 中添加 lintOnSave: false

lintOnSave
  检查代码的工具
  设置是否在开发环境下每次保存代码时都启用 eslint验证
  value 值:
    false:关闭 elsint 检测
    true:开启每次保存都进行检测,效果与warning一样
    'warning':开启每次保存都进行检测, lint 报错信息将显示到控制台命令行,编译并不会失败
    'default':开启每次保存都进行检测, lint 报错信息将显示到浏览器页面上,且编译失败
    'error':开启每次保存都进行检测, lint 报错信息以及警告信息将显示到浏览器页面上,且编译失败

npm
  Nodejs下的包管理器
webpack
  它主要的用途是通过 CommonJS 的语法把所有浏览器端需要发布的静态资源做相应的准备
  比如资源的合并和打包
vue-cli
  用户生成Vue工程模板
  帮你快速开始一个 vue 的项目,也就是给你一套 vue 的结构,包含基础的依赖库
  只需要 npm install 就可以安装


Q:如何在浏览器中打开 VSCode 的 html ? 
A:在 VSCode 中搜索并安装组件 open in browser , Alt+B 即可在默认浏览器中打开

灵活运用 var that = this;

创建 Vue 项目后记得删除 App.vue 里的样式!

export default{
  name: "home",
  // 数据对象
  data(){
    return{
      msg: "123"
    };
  },
  // 组件,重复利用,记得导入
  // import Head from "@/components/Head.vue";
  components: {
    Head
  },
  beforeCreate() {
  },
  methods: {
    add() {}
  },
  created() {
  },
  // 挂载
  // 真实 DOM 挂载之前
  // 使用场景:预处理 data ,不会触发 update 钩子函数
  beforeMount() {
    // 重新改变data中的值
    this.msg = "hello,world";
  }
  // 真实DOM挂载之后
  // 此处可以获取到真实的DOM
  mounted() {
    console.log("beforeMount函数执行了----此时可以获取到真实DOM");
    console.log(document.getElementById("myMsg"));
  },
  // 更新
  // 更新之前
  beforeUpdate() {
    console.log("beforeUpdate函数执行了-----此时获取不到更新的真实DOM");
    console.log(document.querySelectorAll("#myArr>li"));
  },
  // 更新之后
  // 场景：获取更新真实DOM之后
  updated() {
    console.log("update函数执行了-----此时可以获取到更新的真实DOM");
    console.log(document.querySelectorAll("#myArr>li"));
  }
}

components是小组件
containers是容器级组件
views是页面级组件

<router-view/>
  在 App.vue 中,指向 router 中 index.js 的 path: "/" 页面 

Q:如何修改 vue3 的 title ?
A:在 vue.config.js 中添加如下配置
    chainWebpack(config) {
      config.plugin('html').tap((args) => { //标题
        args[0].title = '在吗?';
        return args;
      })
    }

Q:指定端口
A:在 vue.config.js 中添加如下配置
    devServer:{
  	  port: 8091
    }